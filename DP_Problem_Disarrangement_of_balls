// GFG problem Tag:  Disarrangement of balls
// Link: https://practice.geeksforgeeks.org/problems/dearrangement-of-balls0918/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

Ans - 

// Using recursion - TLE


//User function Template for Java

class Solution{
    static long disarrange(int N){
        // code here
        // base case
        if(N == 1)
        return 0;
        
        if(N == 2)
        return 1;
        
        return (N-1) * (disarrange(N-1)+disarrange(N-2));
    }
}


// Using Top - Down Approach using memoization



//User function Template for Java

class Solution{
    static long helper(int N, long[] dp)
    {
        if(N == 1) return 0;
        if(N == 2) return 1;
        
        if(dp[N]!=0) return dp[N];
        
        dp[N] = ((N-1) *  helper(N-1, dp) + helper(N-2, dp));
        return dp[N];
    }
    static long disarrange(int N){
        long[] dp = new long[N+1];
        return helper(N, dp);
    }
}


// Using Bottom Up approach - Tabulation method



//User function Template for Java

class Solution{
    public static int mod = 1000000007;
    static long helper(int N)
    {
        long[] dp = new long[N+1];
        dp[1] = 0;
        dp[2] = 1;
        
        for(int i=3; i<=N; i++)
        {
            dp[i] = (((i-1)%mod) * ((dp[i-1]) + dp[i-2])%mod)%mod;
        }
        return dp[N];
    }
    static long disarrange(int N){
        return helper(N);
    }
}

// MAX space optimised 



//User function Template for Java

class Solution{
    public static int mod = 1000000007;
    static long helper(int N)
    {
        if(N==1 || N==2) return N-1;
        
        long prev1 = 0, prev2 = 1;
        
        for(int i=3; i<=N; ++i)
        {
            long curr = (((i-1)%mod)*(prev1+prev2)%mod)%mod;
            prev1= prev2;
            prev2=curr;
        }
        return prev2;
    }
    static long disarrange(int N){
        return helper(N);
    }
}
